name: build-and-deploy

on:
  push:
    branches: [ main ]

permissions:
  contents: read
  id-token: write
  packages: write

env:
  APP_NAME: app-svc
  NAMESPACE: dev

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      image: ${{ steps.meta.outputs.image }}
      image_tag: ${{ steps.meta.outputs.image_tag }}
    steps:
      - uses: actions/checkout@v4

      - uses: docker/setup-buildx-action@v3

      - uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build & push image
        run: |
          IMAGE="ghcr.io/${{ github.repository }}/${{ env.APP_NAME }}:${{ github.sha }}"
          docker build -t "$IMAGE" .
          docker push "$IMAGE"
          echo "IMAGE=$IMAGE" >> $GITHUB_ENV
          echo "IMAGE_TAG=${{ github.sha }}" >> $GITHUB_ENV

      - name: Set outputs
        id: meta
        run: |
          echo "image=${IMAGE}" >> $GITHUB_OUTPUT
          echo "image_tag=${IMAGE_TAG}" >> $GITHUB_OUTPUT

  deploy-dev:
    runs-on: ubuntu-latest
    needs: build
    environment: dev
    permissions:
      id-token: write
      contents: read
    steps:
      - uses: actions/checkout@v4

      - name: Install kubectl
        uses: azure/setup-kubectl@v4

      - name: Install Helm
        uses: azure/setup-helm@v4

      # (Optional one-time) Inspect OIDC token to align IAM trust policy
      # - name: Inspect OIDC token (debug)
      #   run: |
      #     TOKEN_JSON=$(curl -sH "Authorization: Bearer $ACTIONS_ID_TOKEN_REQUEST_TOKEN" \
      #       "$ACTIONS_ID_TOKEN_REQUEST_URL&audience=sts.amazonaws.com")
      #     TOKEN=$(echo "$TOKEN_JSON" | jq -r .value)
      #     PAYLOAD=$(echo "$TOKEN" | awk -F. '{print $2}' | base64 -d 2>/dev/null)
      #     echo "OIDC sub: " $(echo "$PAYLOAD" | jq -r .sub)

      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ secrets.AWS_REGION }}
          role-skip-session-tagging: true

      - name: Update kubeconfig
        run: aws eks update-kubeconfig --name "${{ secrets.EKS_CLUSTER }}" --region "${{ secrets.AWS_REGION }}"

      - name: Helm upgrade
        run: |
          helm upgrade --install "${{ env.APP_NAME }}" ./helm \
            --namespace "${{ env.NAMESPACE }}" --create-namespace \
            --set image.repository="ghcr.io/${{ github.repository }}/${{ env.APP_NAME }}" \
            --set image.tag="${{ needs.build.outputs.image_tag }}"